@palette=false
abstract internal class Message extends MessageCommon
{
  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  define Str QoSLevels = "FireAndForget, GuaranteeReceived, GuaranteeReceivedOnce"

  @range=QoSLevels
  @config property byte QoS = 0

  // 0: publish when changed; 1000: publish per 1 sec; 2000: per 2 secs; 3000: ...
  @unit=Units.millisecond
  @config property int publishInterval = 5000

  @unit=Units.millisecond
  @config property int updateInterval = 3000
  
  ////////////////////////////////////////////////////////////////
  // Methods
  ////////////////////////////////////////////////////////////////
  // natives
  ** 
  ** publish message to MQTT broker 
  **  - handle: MQTT session handle 
  **  - topic: message topic 
  **  - payload: message payload 
  **  - payload_len: length of payload 
  **  - qos: MQTT Quality of Service, valid values: 0, 1, 2
  static native void doPublish(Obj handle, Str topic, Str payload, int payload_len, int qos)
  static native void doSubscribe(Obj handle, Str topic, int qos)
  static native void doUnsubscribe(Obj handle, Str topic)
  static native bool fetchData(Obj handle, Str topic, Str buf, int length);

  protected virtual Str getPayload() { return "" }

  override virtual void execute()
  {
    if (error != Ok)
      return

    if (publishInterval > 0)
      readyToPublish = (Sys.ticks()-lastPublishTime) >= (long)publishInterval*1ms
  }
  
  ** 
  ** publish linked value to MQTT broker
  ** 
  internal virtual override void publish(Obj handle)
  {
    if (error != Ok)
      return

    if (handle == null)
    {
      log.message("PUBLISH: null handle")
      return
    }

    if (!readyToPublish)
      return

    Str msg = getPayload()
    doPublish(handle, fullTopicName, msg, msg.length(), QoS)

    lastPublishTime = Sys.ticks()
    readyToPublish = false
  }
  
  ** 
  ** update local slot data from subscribed data
  ** 
  protected virtual bool updateData(Obj handle)
  {
    bool result = fetchData(handle, fullTopicName, strBuf, strLen-1)
    return result
  }
  
  ** 
  ** subscribe topic on MQTT broker refered by given handle
  ** 
  internal virtual override void subscribe(Obj handle)
  {
    if ((handle != null) && unsubscribeNeed)
    {
      unsubscribe(handle)
      unsubscribeNeed = false
    }

    if (error != Ok)
      return

    if (handle == null)
    {
      log.message("SUBSCRIBE: null handle")
      return
    }

    if (subscribedToTopic)
    {
      long now = Sys.ticks()
      if (now - lastUpdateTime > (long)updateInterval*1ms) {
        updateData(handle)
        lastUpdateTime = now
      }
    }
    else
    {
      log.message("SUBSCRIBE: topic=${fullTopicName}")
      doSubscribe(handle, fullTopicName, QoS)
      lastSubscribedTopic.copyFromStr(fullTopicName, fullTopicNameLen)
      subscribedToTopic = true
    }
  }
  
  ** 
  ** unsubscribe topic on MQTT broker refered by given handle
  ** 
  internal virtual override void unsubscribe(Obj handle)
  {
    if ((error != Ok) && !unsubscribeNeed)
      return

    if (handle == null)
    {
      log.message("UNSUBSCRIBE: null handle")
      return
    }

    if (!subscribedToTopic)
      return
    
    log.message("UNSUBSCRIBE: topic=${lastSubscribedTopic}")
    doUnsubscribe(handle, lastSubscribedTopic);
    subscribedToTopic = false
  }


  internal virtual override void updateFullName()
  {
    super.updateFullName()
    unsubscribeNeed = true
  }

  protected virtual override void updatePrefix(Str prefix)
  {
    super.updatePrefix(prefix)
  }
  
  virtual override void changed(Slot slot) 
  {
    super.changed(slot)
    if (error == Ok && slot.name == "payload" && publishInterval == 0)
      readyToPublish = true
  }
  
  ** 
  ** reset current message's local state 
  ** 
  internal virtual override void reset()
  {
    readyToPublish = false
    subscribedToTopic = false
    unsubscribeNeed = false
    lastPublishTime = 0L
    lastUpdateTime = 0L
  }

  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  define int strLen = 64

  private bool unsubscribeNeed = false
  private bool readyToPublish = false
  private bool subscribedToTopic = false
  private long lastPublishTime = 0L
  private long lastUpdateTime = 0L
  
  protected inline Str(strLen) strBuf = "";
  protected inline Str(fullTopicNameLen) lastSubscribedTopic = ""

  internal define Log log
}
