**
** MQTT Worker Base Class
**
@palette=false
abstract internal class Worker extends Component
{
  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  @config @asStr property Buf(64) host
  @config property int port = 1883

  @config @asStr property Buf(16) clientid
  @config @asStr property Buf(16) username
  @config @asStr property Buf(16) password
  
  @config property bool autoStart = true

  define int Ok = 0
  define int Err_InvalidParent = 1
  define int Err_InvalidHost = 2
  define int Err_InvalidPort = 3
  define int Err_InvalidClientId = 4

  define Str WorkerError = "Ok, InvalidParent, InvalidHost, InvalidPort, InvalidClientId"
  @range=WorkerError
  @readonly property byte error = 0
  
  define int Disconnected = 0
  define int Connected = 1
  define int Connecting = 2
  define int Timeout = 3
  define Str NetworkStatus = "Disconnected, Connected, Connecting, Timeout"
  @range=NetworkStatus
  @readonly property byte status = Disconnected
  
  ////////////////////////////////////////////////////////////////
  // Methods
  ////////////////////////////////////////////////////////////////
  abstract void doWork(MessageCommon m)
  
  // natives 
  **
  ** start a MQTT session to given host:port using clientid, username and password.
  ** a session handle object will be returned, that will be used by later
  ** native calls on this session.
  ** 
  static native Obj startSession(Str host, int port, Str clientid, Str username, Str password)

  ** 
  ** stop the MQTT session for given session handle object
  ** 
  static native void stopSession(Obj handle)

  ** 
  ** check if session for given session handle object live or not 
  ** 
  static native bool isSessionLive(Obj handle)

  ** 
  ** update user's inputs for following constraints:
  **   - parent component should be MQTTService
  **   - host slot should not be empty 
  **   - port slot should not be empty 
  **   - clientid should not be empty 
  private void validateInputs() 
  {
    Component parentComponent = Sys.app.lookup(parent)
    if (!parentComponent.type.is(MQTTService.type))
      error := Err_InvalidParent
    else if (port == 0)
      error := Err_InvalidPort
    else if (host.toStr().length() == 0)
      error := Err_InvalidHost
    else if (clientid.toStr().length() == 0)
      error := Err_InvalidClientId
    else
      error := Ok

    if (autoStart && error == Ok)
      connect()
  }


  private void log(Str s)
  {
    MQTTService.log.message("connection(${host.toStr()}:${port}, ${clientid.toStr()}) ${s}")
  }

  override virtual void start() 
  {
    validateInputs()
  }
  
  override virtual void stop() 
  {
    disconnect()
  }
  
  ** 
  ** reset all children components state
  **
  private void resetAllChildren()
  {
    for(Component child = Sys.app.lookup(children); child != null; child = Sys.app.lookup(child.nextSibling))
    {
      if (child.type.is(MessageCommon.type)) {
        MessageCommon m = (MessageCommon)child
        m.reset()
      }
    }
  }

  override int parentEvent(int eType, Component parent)
  {
    if (eType == Component.ADDED && parent.type.is(MQTTService.type))
      error := Err_InvalidParent; 
    return 0
  }
  
  virtual override void changed(Slot slot) 
  {
    super.changed(slot)
    int sid = slot.id
    if (sid == Worker.host.id || sid == Worker.port.id || sid == Worker.clientid.id || sid == Worker.autoStart.id)
      validateInputs()
        
    if (sid == Worker.status.id)
    {
      MQTTService service = (MQTTService)Sys.app.lookupService(MQTTService.type)
      if (service == null) {
        App.log.error("MQTTService is missing")
        return
      }

      switch(status) {
        case Connected:
          log("established")
          break
        case Timeout:
          retryStartTime = Sys.ticks()
          retryTimes = 0
          log("lost")
          break
        case Disconnected:
          log("disconnected")
          break
        case Connecting:
          log("connecting")
          break
        default:
          MQTTService.log.message("invalid status value: ${status}")
      }
    }
  }


  **
  ** disconnect and reconnect to MQTT broker
  **
  action void reconnect()
  {
    disconnect();
    updateStatus();
    connect();
  }


  ** 
  ** connect to MQTT broker and start a new session
  ** 
  action void connect()
  {
    if (error != Ok || status == Connecting || status == Connected || handle != null)
      return

    handle = startSession(host.toStr(), port, clientid.toStr(), username.toStr(), password.toStr())
    sessionStartTime = Sys.ticks()
    status := Connecting
  }

  ** 
  ** close the current MQTT session and disconnect to MQTT broker
  ** 
  action void disconnect()
  {
    if (handle == null || status == Disconnected)
      return

    stopWorker()
    status := Disconnected
  }

  **
  ** close the current MQTT session and disconnect to MQTT broker
  **
  private void stopWorker()
  {
    if (handle == null)
      return
    stopSession(handle)
    handle = null
    sessionStartTime = 0L
    resetAllChildren()
  }
  
  ** 
  ** update session status 
  **
  private void updateStatus() 
  {
    //check if connection is timeout 
    if (status == Connected)
    {
      if (handle==null)
        status := Timeout
      else if (!isSessionLive(handle))
      {
        stopWorker()
        status := Timeout
      }
    }
    else if (status == Connecting)
    {
      // if session failed to start within sessionTimeout seconds
      if (Sys.ticks()-sessionStartTime>sessionTimeout)
      {
        MQTTService service = (MQTTService)Sys.app.lookupService(MQTTService.type)
        if (service == null)
          App.log.error("MQTTService is missing")
        else
          log("timeout, stop session now ...")
        stopWorker()

        status := Timeout
      }
      else 
      {
        if (isSessionLive(handle))
          status := Connected
      }
    }
  }

  private void retry() 
  {
    if (status != Timeout)
      return

    //exponential backoff 
    if (Sys.ticks()-retryStartTime > 1sec*power(retryTimes)) {
      retryStartTime = Sys.ticks()
      if (retryTimes < 8) retryTimes += 1
      log("retry to connect ...")
      connect()
    }
  }
  
  virtual bool work()
  {
    if (status == Disconnected)
      return true

    updateStatus()
    if (status == Timeout)
    {
      retry()
      return true
    }

    for(Component child = Sys.app.lookup(children); child != null; child = Sys.app.lookup(child.nextSibling))
    {
      if (child.type.is(MessageCommon.type)) {
        MessageCommon m = (MessageCommon)child
        doWork(m)
      }
    }
    
    return true
  }

  private long power(int val) {
    long result = 1L;
    for(int i=0; i<val; ++i)
      result *= 2L;
    return result;
  }

  Obj getHandle()
  {
    return handle
  }

  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  private int retryTimes = 0
  private long retryStartTime = 0L
  
  ** 
  ** MQTT Session Handle Object
  ** 
  protected Obj handle = null

  private long sessionStartTime = 0L
  private long sessionTimeout = 30sec
}
